# created by Jimmy for all the Custom MACROS!


##############################
# Allows your printer to move w/o checks
##############################
[force_move]
enable_force_move: True


#################################
# MECHANICAL GANTRY CALIBRATION
##################################
[gcode_macro MECHANICAL_GANTRY_CALIBRATION]
gcode:
    ### SET THIS DEFAULT CARFULLY - start really low
    {% set my_current = params.CURRENT|default(0.20)|float %} ; adjust crash current on the fly :D
    ###
    {% set oldcurrent = printer.configfile.settings["tmc2209 stepper_z"].run_current %}
    {% set oldhold = printer.configfile.settings["tmc2209 stepper_z"].hold_current %} 
    {% set x_max = printer.toolhead.axis_maximum.x %} 
    {% set y_max = printer.toolhead.axis_maximum.y %} 
    {% set z_max = printer.toolhead.axis_maximum.z %} 
    {% set fast_move_z = printer.configfile.settings["printer"].max_z_velocity %}
    {% set fast_move = printer.configfile.settings["printer"].max_velocity %}
    M117 {printer.homed_axes}
    {% if printer.homed_axes != 'xyz' %}
        G28 ; Home All Axes
    {% endif %}
    G90 ; absolute
    G0 X{x_max / 2} Y{y_max / 2} F{fast_move * 30 } ;put toolhead in the center of the gantry

    G0 Z{z_max -5} F{fast_move_z * 60 } ; go to the Z-max - 5 at speed max z speed ; CHANGED
    
    SET_TMC_CURRENT STEPPER=stepper_z CURRENT={my_current} ; drop current on Z stepper
    
    {% if printer.configfile.settings["stepper_z1"] %} ; test for dual Z
        SET_TMC_CURRENT STEPPER=stepper_z1 CURRENT={my_current} ; drop current
    {% endif %}

    CONDITIONAL_BEEP I=1
    G4 P200 ; Probably not necessary, it is here just for sure

    SET_KINEMATIC_POSITION Z={z_max - 25} ; Trick printer into beleiving the gantry is 25mm lower than it is ; CHANGED

    G1 Z{z_max} F{6 * 60} ; based on above figures, there will be 20mm worth of grinding ; CHANGED
    CONDITIONAL_BEEP I=2
    G4 P10000 ; wait 10 seconds
    G1 Z{z_max -6} F{6 * 60} ; move 4mm down
    CONDITIONAL_BEEP I=3
    G4 P200 ; same as the first one
    
    SET_TMC_CURRENT STEPPER=stepper_z CURRENT={oldcurrent} HOLDCURRENT={oldhold}

    {% if printer.configfile.settings["stepper_z1"] %} ; test for dual Z
        SET_TMC_CURRENT STEPPER=stepper_z1 CURRENT={oldcurrent} HOLDCURRENT={oldhold} ; reset current
    {% endif %}

    G1 Z{z_max -30} F{6 * 60} ; move to 30mm below z-max to allow homing movement

    G4 P200 ; same as the first one
    G28 Z ; we MUST home again as the ganty is really in the wrong place.

###############################################
# G34 Using above Mechanical Gantry Calibration
##############################################
[gcode_macro G34]
gcode:
    MECHANICAL_GANTRY_CALIBRATION

[menu __main __setup __calib __mech_gantry_calibrate]
type: command
enable: {not printer.idle_timeout.state == "Printing"}
name: G34 Gantry Level
gcode:
    G34

## UNSAFE_MOVE_TOOL
## Move the toolhead without homing
########## Parameters ##########
## X: The X distance to move by (default: 0) mm
## Y: The Y distance to move by (default: 0) mm
## Z: The Z distance to move by (default: 0) mm
## F: The feedrate to use (default: 10) mm/s
[gcode_macro UNSAFE_MOVE_TOOL]
description: Move the toolhead without homing
gcode:
    {% set z = params.Z|default(0)|float %}
    {% set x = params.X|default(0)|float %}
    {% set y = params.Y|default(0)|float %}
    {% set f = params.F|default(10)|float %}
    G90
    SET_KINEMATIC_POSITION Z={(printer.toolhead.axis_maximum.z/2)} X={(printer.toolhead.axis_maximum.x/2)} Y={(printer.toolhead.axis_maximum.y/2)}
    G0 X{(printer.toolhead.axis_maximum.x/2)+x} Y{(printer.toolhead.axis_maximum.y/2)+y} Z{(printer.toolhead.axis_maximum.z/2)+z} F{ (f*60) }
    M84


##############################
#ADXL_X
##############################
[gcode_macro ADXL_X]
description: calibrate input shaper for X
gcode:
  M118 DO NOT TOUCH THE PRINTER UNTIL DONE!!!
    {% if 'xyz' not in printer.toolhead.homed_axes %}
    g28
    {% endif %}
 #home_check # or g28 if you do not have a macro to check if your printer is homed
    SHAPER_CALIBRATE axis=x
 #RUN_SHELL_COMMAND CMD=adxl_x 
  M118 Test Done
    
##############################
#ADXL_Y
##############################
[gcode_macro ADXL_Y]
description: calibrate input shaper for Y
gcode:
  M118 DO NOT TOUCH THE PRINTER UNTIL DONE!!!
 {% if 'xyz' not in printer.toolhead.homed_axes %}
 g28
 {% endif %}
 #home_check # or g28 if you do not have a macro to check if your printer is homed
 SHAPER_CALIBRATE axis=y
 #RUN_SHELL_COMMAND CMD=adxl_y
  M118 Test Done

##############################
#Z-Offset Calibration
##############################
[gcode_macro Z_Offset_Calbirate]
gcode:
   M118 DO NOT TOUCH THE PRINTER UNTIL DONE!!!
    {% if 'xyz' not in printer.toolhead.homed_axes %}
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=55
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET=150
    TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM=55
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM=150
    g28
    {% endif %}
  Probe_Calibrate

##############################
#PIDTune Hotend
##############################
[gcode_macro PIDTuneHOTEND]
gcode:
	{% set TEMP = params.TEMP|default(205)|float %}
	PID_CALIBRATE HEATER=extruder TARGET={TEMP}

##############################
#PIDTune Bed
##############################
[gcode_macro PIDTuneBED]
gcode:
    {% set TEMP = params.TEMP|default(55)|float %}
    PID_CALIBRATE HEATER=heater_bed TARGET={TEMP}

######################################################################
# Override M117 command with rawparams                               #
######################################################################

# The macro below will override the default M117 command to echo the message.
#
# It uses the rawparams pseudo-variable that contains the full unparsed
# parameters that was passed to the M117 command.
#
# As this can include comments, we are trimming the text when a `;` or `#` is
# found, and escaping any existing `"`
[gcode_macro M117]
rename_existing: M117.1
gcode:
  {% if rawparams %}
    {% set escaped_msg = rawparams.split(';', 1)[0].split('\x23', 1)[0]|replace('"', '\\"') %}
    SET_DISPLAY_TEXT MSG="{escaped_msg}"
    RESPOND TYPE=command MSG="{escaped_msg}"
  {% else %}
    SET_DISPLAY_TEXT
  {% endif %}


######################################################################
# Auto Idle Shutdown & Thermal Runway Protection                     
######################################################################
[gcode_macro _POWER_ON_PRINTER]                 #Hidden Macro to turn on/off (use _ in the front to make hidden)
gcode:
  {action_call_remote_method("set_device_power",
                             device="Wemo",
                             state="on")}

[gcode_macro _POWER_OFF_PRINTER]
gcode:
  {action_call_remote_method("set_device_power",
                             device="Wemo",
                             state="off")}


######################################################################
#Thermal Runway Similar to OctoPrint         - Updated 5/12/2024 per Klipper Discord Support          
######################################################################
[respond]

[delayed_gcode bed_safety]
initial_duration = 2.
gcode:
    {% if printer.heater_bed.temperature >= printer.configfile.settings.heater_bed.max_temp %}
    M118 EXCEED_THERMAL_LIMIT_BED
    _POWER_OFF_PRINTER
    {% else %}
    UPDATE_DELAYED_GCODE ID=bed_safety DURATION=2
    {% endif %}

[delayed_gcode extruder_safety]
initial_duration = 2.
gcode:
    {% if printer.extruder.temperature >= printer.configfile.settings.extruder.max_temp %}
    M118 EXCEED_THERMAL_LIMIT_EXTRUDER
    _POWER_OFF_PRINTER
    {% else %}
    UPDATE_DELAYED_GCODE ID=extruder_safety DURATION=2
    {% endif %}

######################################################################
#Macro to Poll Printer Status, this is from https://github.com/tinntbg/auto-power-off-klipper                  
######################################################################
[delayed_gcode POWER_OFF_PRINTER_CHECK]             #Check Power off status of the printer
gcode:
  {% if printer.idle_timeout.state == "Idle" or printer.idle_timeout.state == "Ready" %}
    {% if printer.extruder.temperature < 50.0 and printer.heater_bed.temperature < 50.0 %}
        {% if printer.extruder.target == 0.0 and printer.heater_bed.target == 0.0 %}
            UPDATE_DELAYED_GCODE ID=POWER_OFF_PRINTER_CHECK DURATION=0
            _POWER_OFF_PRINTER
        {% else %}
            UPDATE_DELAYED_GCODE ID=POWER_OFF_PRINTER_CHECK DURATION=2
        {% endif %}
    {% else %}
        {% if printer.idle_timeout.state == "Printing" %}
            UPDATE_DELAYED_GCODE ID=POWER_OFF_PRINTER_CHECK DURATION=0
        {% else %}
            {% if printer.extruder.target == 0.0 and printer.heater_bed.target == 0.0 %}
                UPDATE_DELAYED_GCODE ID=POWER_OFF_PRINTER_CHECK DURATION=2
            {% else %}
                UPDATE_DELAYED_GCODE ID=POWER_OFF_PRINTER_CHECK DURATION=0
            {% endif %}
        {% endif %}
    {% endif %}
  {% endif %}

[gcode_macro ACTIVATE_POWER_OFF]                      #Manually activate power Off
gcode:
    UPDATE_DELAYED_GCODE ID=POWER_OFF_PRINTER_CHECK_ACT DURATION=60

[gcode_macro DEACTIVATE_POWER_OFF]                    #manually de-activate power off
gcode:
    UPDATE_DELAYED_GCODE ID=POWER_OFF_PRINTER_CHECK_ACT DURATION=0

[delayed_gcode POWER_OFF_PRINTER_CHECK_ACT]           #Check printer status w/ delay
gcode:
  {% if printer.idle_timeout.state == "Idle" or printer.idle_timeout.state == "Ready" %}
    UPDATE_DELAYED_GCODE ID=POWER_OFF_PRINTER_CHECK DURATION=30
  {% else %}
    UPDATE_DELAYED_GCODE ID=POWER_OFF_PRINTER_CHECK_ACT DURATION=60
  {% endif %}

###########################################
# BL Touch Probe Test (Deprecated Only for BLTouch)
###########################################
#[gcode_macro BL_Probe_Out]
#gcode:
#    BLTOUCH_DEBUG COMMAND=pin_down
#[gcode_macro BL_Probe_In]
#gcode:
#    BLTOUCH_DEBUG COMMAND=pin_up


######################################################################
#Temp Sensor
######################################################################
[temperature_sensor RPI]
sensor_type: temperature_host
min_temp: 10
max_temp: 100

[temperature_sensor SKR MINI]
sensor_type: temperature_mcu
min_temp: 0
max_temp: 100

#########################
## Update Git Macro
########################
[gcode_macro GIT_BACKUP]
gcode:
    RUN_SHELL_COMMAND CMD=update_git_script
    
[gcode_shell_command update_git_script]
command: bash /home/pi/klipper-backup/script.sh
timeout: 90.0
verbose: True

##########################
## Probe_Accuracy Macro
##########################
[gcode_macro Probe_Accuracy_Test]
description: Performs Probe Accuracy
gcode:
  M118 DO NOT TOUCH THE PRINTER UNTIL DONE!!!
    {% if 'xyz' not in printer.toolhead.homed_axes %}
    g28
    {% endif %}
 #home_check # or g28 if you do not have a macro to check if your printer is homed
    PROBE_ACCURACY
  M118 Test Done 